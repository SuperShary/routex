import { db } from '@/db';
import { runs } from '@/db/schema';

async function main() {
    const now = new Date();
    const twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);
    
    const sampleRuns = [
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 1,
            model: 'gpt-4o',
            tokens: 2847,
            costUsd: 0.85,
            latencyMs: 3200,
            output: 'Based on the provided technical documentation, I have created a comprehensive API reference guide that includes detailed endpoint descriptions, request/response schemas, authentication requirements, and practical implementation examples. The guide covers all major API operations including CRUD operations, pagination, error handling, and rate limiting specifications.',
            verdict: JSON.stringify({ quality: 'excellent', completeness: 0.92, accuracy: 0.95 }),
            learn: JSON.stringify({ improvement: 'Consider adding more code examples in different programming languages', suggestions: ['Add Python examples', 'Include JavaScript/Node.js examples'] }),
            status: 'succeeded',
            createdAt: new Date(twoWeeksAgo.getTime() + 1 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 2,
            model: 'claude-3.5-sonnet',
            tokens: 5632,
            costUsd: 1.69,
            latencyMs: 4800,
            output: 'I have analyzed the marketing campaign data and created a detailed performance report highlighting key metrics including CTR, conversion rates, ROI analysis, and audience engagement patterns. The report includes actionable insights for optimization and recommendations for future campaigns.',
            verdict: JSON.stringify({ quality: 'outstanding', insights: 0.94, actionability: 0.88 }),
            learn: JSON.stringify({ nextSteps: 'Focus more on demographic segmentation analysis', improvements: ['Include seasonal trends', 'Add competitor comparison'] }),
            status: 'succeeded',
            createdAt: new Date(twoWeeksAgo.getTime() + 2 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 3,
            model: 'gpt-4o-mini',
            tokens: 1298,
            costUsd: 0.06,
            latencyMs: 1800,
            output: 'Generated a comprehensive test suite for the authentication module including unit tests, integration tests, and edge case scenarios. All tests pass successfully with 95% code coverage.',
            status: 'succeeded',
            createdAt: new Date(twoWeeksAgo.getTime() + 2 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 4,
            model: 'claude-3-haiku',
            tokens: 892,
            costUsd: 0.04,
            latencyMs: 1200,
            output: 'Email campaign created successfully with personalized subject lines, A/B test variations, and segmented audience targeting. Ready for deployment.',
            status: 'succeeded',
            createdAt: new Date(twoWeeksAgo.getTime() + 3 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 5,
            model: 'gemini-1.5-pro',
            tokens: 7891,
            costUsd: 3.95,
            latencyMs: 22000,
            output: 'Comprehensive business plan generated including market analysis, financial projections, competitive landscape assessment, and strategic recommendations for the next 5 years.',
            verdict: JSON.stringify({ completeness: 0.89, strategic_value: 0.91 }),
            status: 'succeeded',
            createdAt: new Date(twoWeeksAgo.getTime() + 4 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 6,
            model: 'llama-3.1-70b',
            tokens: 4592,
            costUsd: 0.92,
            latencyMs: 8500,
            output: 'Code review completed with 47 recommendations identified, including 12 critical security issues, 23 performance optimizations, and 12 best practice improvements.',
            verdict: JSON.stringify({ security_score: 0.68, performance_impact: 0.84 }),
            learn: JSON.stringify({ priority: 'Address security issues first', timeline: 'Estimated 3-4 days for fixes' }),
            status: 'succeeded',
            createdAt: new Date(twoWeeksAgo.getTime() + 5 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 7,
            model: 'gpt-4o',
            tokens: 3456,
            costUsd: 1.04,
            latencyMs: 4200,
            output: 'Data analysis and visualization created successfully with interactive charts, trend analysis, and anomaly detection. The dashboard provides real-time insights into key performance metrics.',
            status: 'running',
            createdAt: new Date(twoWeeksAgo.getTime() + 6 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 8,
            model: 'claude-3-haiku',
            tokens: 1123,
            costUsd: 0.05,
            latencyMs: 1500,
            output: 'Social media content calendar generated with 30 unique posts, platform-specific optimizations, and engagement-driving captions.',
            status: 'succeeded',
            createdAt: new Date(twoWeeksAgo.getTime() + 7 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 9,
            model: 'claude-3.5-sonnet',
            tokens: 6892,
            costUsd: 2.07,
            latencyMs: 12000,
            output: 'Technical architecture document completed including system design, database schema, API specifications, security considerations, and scalability requirements.',
            verdict: JSON.stringify({ design_quality: 0.91, feasibility: 0.88, scalability_score: 0.85 }),
            status: 'succeeded',
            createdAt: new Date(twoWeeksAgo.getTime() + 8 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 10,
            model: 'gpt-4o-mini',
            tokens: 2341,
            costUsd: 0.12,
            latencyMs: 2800,
            output: 'Product description failed to generate due to insufficient product specifications and feature details provided.',
            status: 'failed',
            createdAt: new Date(twoWeeksAgo.getTime() + 9 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 1,
            model: 'gemini-1.5-pro',
            tokens: 7289,
            costUsd: 3.64,
            latencyMs: 18500,
            output: 'Comprehensive documentation generated for the machine learning model including architecture overview, training methodology, performance benchmarks, and deployment guidelines.',
            status: 'succeeded',
            createdAt: new Date(twoWeeksAgo.getTime() + 10 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 2,
            model: 'llama-3.1-70b',
            tokens: 3987,
            costUsd: 0.80,
            latencyMs: 9200,
            output: 'Automated testing framework implemented with unit tests, integration tests, end-to-end tests, and performance benchmarks. 98% test coverage achieved.',
            learn: JSON.stringify({ coverage_score: 0.98, testing_strategy: 'comprehensive' }),
            status: 'succeeded',
            createdAt: new Date(twoWeeksAgo.getTime() + 11 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 3,
            model: 'gpt-4o',
            tokens: 5123,
            costUsd: 1.54,
            latencyMs: 5100,
            output: 'Customer onboarding workflow created with automated email sequences, in-app guidance, progress tracking, and personalized recommendations.',
            verdict: JSON.stringify({ user_experience: 0.87, completion_rate: 0.82 }),
            status: 'succeeded',
            createdAt: new Date(twoWeeksAgo.getTime() + 12 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 4,
            model: 'claude-3-haiku',
            tokens: 1456,
            costUsd: 0.07,
            latencyMs: 1800,
            output: 'Quick response: Your service request has been received and is being processed. Expected resolution time is 24-48 hours.',
            status: 'running',
            createdAt: new Date(twoWeeksAgo.getTime() + 13 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 5,
            model: 'gpt-4o-mini',
            tokens: 2678,
            costUsd: 0.13,
            latencyMs: 3400,
            output: 'Market research report generated including competitor analysis, target audience insights, pricing strategies, and market opportunity assessment.',
            status: 'succeeded',
            createdAt: new Date(twoWeeksAgo.getTime() + 13 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 6,
            model: 'claude-3.5-sonnet',
            tokens: 6234,
            costUsd: 1.87,
            latencyMs: 9800,
            output: 'Software architecture review completed with 28 recommendations for improving scalability, reducing complexity, and enhancing security posture.',
            verdict: JSON.stringify({ maintainability: 0.78, scalability_rating: 0.84 }),
            learn: JSON.stringify({ refactors_needed: 15, estimated_effort: '6-8 weeks' }),
            status: 'succeeded',
            createdAt: new Date(now.getTime() - 5 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 7,
            model: 'gemini-1.5-pro',
            tokens: 7987,
            costUsd: 3.99,
            latencyMs: 21500,
            output: 'Comprehensive financial analysis and forecasting model created with cash flow projections, risk assessments, and scenario planning for the next fiscal year.',
            status: 'failed',
            createdAt: new Date(now.getTime() - 4 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 8,
            model: 'llama-3.1-70b',
            tokens: 4567,
            costUsd: 0.91,
            latencyMs: 7800,
            output: 'Database optimization plan with query analysis, index recommendations, partitioning strategies, and performance monitoring guidelines.',
            learn: JSON.stringify({ expected_improvement: '40-60%', critical_issues: 3 }),
            status: 'succeeded',
            createdAt: new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 9,
            model: 'gpt-4o',
            tokens: 3848,
            costUsd: 1.15,
            latencyMs: 4500,
            output: 'Cybersecurity audit completed with vulnerability assessment, security gap analysis, and compliance recommendations.',
            verdict: JSON.stringify({ security_score: 0.76, compliance_level: 0.89 }),
            status: 'succeeded',
            createdAt: new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 10,
            model: 'claude-3-haiku',
            tokens: 987,
            costUsd: 0.05,
            latencyMs: 1300,
            output: 'AI training dataset generated with 10,000 annotated examples covering various use cases and edge conditions.',
            status: 'succeeded',
            createdAt: new Date(now.getTime() - 1 * 24 * 60 * 60 * 1000),
        },
        {
            userId: 'user_01h4kxt2e8z9y3b1n7m6q5w8r4',
            orgId: 1,
            taskSpecId: 1,
            model: 'gpt-4o-mini',
            tokens: 2098,
            costUsd: 0.10,
            latencyMs: 3100,
            output: 'Chatbot conversation flow designed with natural language understanding, context management, and fallback strategies.',
            status: 'succeeded',
            createdAt: new Date(now),
        },
    ];

    await db.insert(runs).values(sampleRuns);
    
    console.log('✅ Runs seeder completed successfully');
}

main().catch((error) => {
    console.error('❌ Seeder failed:', error);
});